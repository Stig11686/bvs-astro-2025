---
import Base from "@/layouts/Base.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import PageHeader from "@/components/widgets/PageHeader.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import { slugifyyy, titleify } from "@/lib/utils/textConverter";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import BlogLayout from "@/components/BlogLayout.astro";
import Features from "@/components/sections/Features.astro";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const {
        blogFolder: blogFolder,
        multilingual: { defaultLanguage, showDefaultLangInUrl },
      } = config.settings;

      const postIndex = await getEntryCTM(
        blogFolder as "blog",
        "-index",
        lang.languageCode,
      );
      const categories = await getTaxonomy(
        blogFolder as "blog",
        "categories",
        lang.languageCode,
      );

      const paths = categories.map((category) => ({
        params: {
          category: slugifyyy(category.slug),
          lang:
            lang.languageCode === defaultLanguage && !showDefaultLangInUrl
              ? undefined
              : lang.languageCode,
        },
        props: { category, postIndex, blogFolder },
      }));

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (postIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return paths;
    }),
  );

  return paths.flat();
}

const { category, blogFolder, postIndex } = Astro.props;

let post = await getEntryCTM(
  blogFolder as "blog",
  "post-1",
  Astro.currentLocale,
);

let title = titleify(`${category.name} posts`);
const description = post?.data.description || postIndex?.data.description;
---

<Base
  {...postIndex?.data}
  title={title}
  description={description}
  disableTagline={true}>
  <PageHeader
    content={{
      hiddenPaths: ["Category"],
      title: `Cagegory: ${titleify(category.name)}`,
    }}
  />
  <BlogLayout
    pageType="list"
    sidebar={{
      enable: true,
      sticky: true,
    }}
    contentList={{
      options: postIndex?.data.options,
      filter: { category: category },
      breadcrumb: true,
      breadcrumbExcludedPaths: ["Category"],
    }}
    content={{ ...post, ...post?.data }}
  />
  <Features />
  <!-- <CallToAction sectionSpaceTop={false} /> -->
</Base>
