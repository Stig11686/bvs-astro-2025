---
import "aos/dist/aos.css";
import "@/styles/globals.css";
import Head from "@/components/global/Head.astro";
import Footer from "@/components/global/Footer.astro";
import removeEmptyKeys from "@/lib/utils/removeEmptyKeys";
import Header from "@/components/global/header/Header.astro";
import type { JSONLDProps } from "@/lib/utils/JsonLdGenerator";import FooterTwo from "@/components/global/FooterTwo.astro";
import BreakpointIndicator from "@/components/widgets/BreakpointIndicator.astro";
import FooterThree from "@/components/global/FooterThree.astro";

interface Props extends JSONLDProps {
  className?: string;
  fitToScreen?: boolean;
  footerSpaceTop?: boolean;
  headerPosition?: "fixed" | "static" | "sticky";
  hasHeaderDarkBackground?: boolean;
  hasBodyDarkBackground?: boolean;
  hideOffcanvas?: boolean;
  draft?: boolean;
  metaTitle?: string;
  metaDescription?: string;
  robots?: string;
  excludeFromSitemap?: boolean;
  customSlug?: string;
  canonical?: string;
  keywords?: string[];
  disableTagline?: boolean;
  structuredData?: Props;
  footerLayout?: "footer-1" | "footer-2" | "footer-3";
}

// destructure frontmatter
let {
  className,
  structuredData,
  headerPosition = "sticky",
  hideOffcanvas = false,
  hasHeaderDarkBackground = false,
  hasBodyDarkBackground = false,
  footerSpaceTop = true,
  footerLayout = "footer-2",
  fitToScreen = true,
} = Astro.props;

// Exclude empty key value weather it may empty string, object or array from Astro.props
let props = removeEmptyKeys(Astro.props);

// Conditionally add min-h-[102vh] class to prevent FOUC (flash of unstyled content) while fast navigation
className = fitToScreen
  ? (className ? className + " " : "") + "fit-to-screen"
  : className;
---

<!doctype html>
<html lang="en">
  <Head {...props} structuredData={structuredData} />
  <body class:list={[hasBodyDarkBackground && "bg-body-dark"]}>
    <Header
      {...props}
      position={headerPosition}
      hasDarkBackground={hasHeaderDarkBackground}
      hideOffcanvas={hideOffcanvas}
    />

    <main {...className ? { class: className } : {}}>
      <slot />
    </main>

    {
      footerLayout === "footer-1" ? (
        <Footer footerSpaceTop={footerSpaceTop} />
      ) : footerLayout === "footer-2" ? (
        <FooterTwo footerSpaceTop={footerSpaceTop} />
      ) : footerLayout === "footer-3" ? (
        <FooterThree footerSpaceTop={footerSpaceTop} />
      ) : null
    }
    <script>
      // @ts-nocheck
      import SmoothScroll from "smoothscroll-for-websites";
      document.addEventListener("DOMContentLoaded", async () => {
        // AOS - https://github.com/michalsnik/aos
        // -----------------------------------------------------
        const AOS = await import("aos");

        AOS.init({
          duration: 1300,
          easing: "reveal-ease-out",
          disable: "mobile",
          once: true,
        });

        // Smooth Scroll - https://github.com/gblazex/smoothscroll-for-websites/wiki
        // -----------------------------------------------------
        SmoothScroll({
          animationTime: 600, // [ms]
          stepSize: 60, // [px]
          touchpadSupport: true,
        });

        // Fix: Support horizontal scrolling by using the mouse wheel + shift (Needed when using smooth scrolling js library - SmoothScroll)
        document.addEventListener(
          "wheel",
          (event) => {
            // Only process when the shift key is held down
            if (!event.shiftKey) return;

            let target = event.target;
            // Traverse up the DOM to find the nearest scrollable element
            while (target && target !== document.body) {
              if (target.scrollWidth > target.clientWidth) {
                event.preventDefault();
                target.scrollBy({
                  left: event.deltaY * 3,
                  behavior: "smooth",
                });
                break;
              }
              target = target.parentElement;
            }
          },
          { passive: false },
        );

        // Button Hover Animation
        // ------------------------------------------
        document.addEventListener("mouseover", function (e) {
          const target = e.target.closest(".creative-hover-anim");
          if (target) {
            const hoverBg = target.querySelector(".hover-bg");
            if (hoverBg) {
              const parentOffset = target.getBoundingClientRect();
              const relX = e.clientX - parentOffset.left;
              const relY = e.clientY - parentOffset.top;
              hoverBg.style.setProperty("--creative-hover-top", `${relY}px`);
              hoverBg.style.setProperty("--creative-hover-left", `${relX}px`);
            }
          }
        });

        const speed = 0.3;
        const maxDistance = 30;
        let rafId: number;

        function clamp(val: number, max: number): number {
          return Math.max(-max, Math.min(val, max));
        }

        function handleMagneticHover(magneticElem: HTMLElement) {
          let isInside = false;

          function updateTransform(e: MouseEvent) {
            if (!isInside) return;

            const rect = magneticElem.getBoundingClientRect();
            const x = (e.clientX - rect.left - rect.width / 2) * speed;
            const y = (e.clientY - rect.top - rect.height / 2) * speed;

            cancelAnimationFrame(rafId);
            rafId = requestAnimationFrame(() => {
              magneticElem.style.transform = `translate(${clamp(x, maxDistance)}px, ${clamp(y, maxDistance)}px)`;
            });
          }

          function resetTransform() {
            isInside = false;
            cancelAnimationFrame(rafId);
            magneticElem.style.transition = "transform 0.2s ease-out";
            magneticElem.style.transform = "translate(0, 0)";
          }

          magneticElem.style.willChange = "transform";
          magneticElem.addEventListener("mouseenter", () => {
            isInside = true;
            magneticElem.style.transition = "transform 0.2s ease-out";
          });
          magneticElem.addEventListener("mousemove", updateTransform);
          magneticElem.addEventListener("mouseleave", resetTransform);
        }

        document
          .querySelectorAll<HTMLElement>(".magnetic-hover-anim")
          .forEach(handleMagneticHover);

        window.addEventListener("mouseout", (e) => {
          if (!e.relatedTarget && !e.toElement) {
            document
              .querySelectorAll<HTMLElement>(".magnetic-hover-anim")
              .forEach((elem) => {
                elem.style.transition = "transform 0.2s ease-out";
                elem.style.transform = "translate(0, 0)";
              });
          }
        });
      });
    </script>
    <BreakpointIndicator />
  </body>
</html>
