---
import type { Section } from "@/types";
import ContactForm from "../widgets/ContactForm.astro";
import { markdownify } from "@/lib/utils/textConverter";
import { getEntryCTM } from "@/lib/contentParser.astro";
import StackedSplit from "../widgets/StackedSplit.astro";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import Card from "../cards/Card.astro";
import type { z } from "astro/zod";
import type { contactSectionSchema } from "@/sections.schema";

type ContactSection = Section & z.infer<typeof contactSectionSchema>;

type Props = {
  content?: ContactSection;
};

let defaultContent = (
  await getEntryCTM("sections", "contact-section", Astro.currentLocale)
)?.data as ContactSection;

let actualContent = overrideObjects(
  { ...defaultContent },
  Astro.props.content,
) as ContactSection;

let {
  enable = true,
  title,
  image,
  description,
  contactInformation,
  map,
  imagePosition,
  form,
} = actualContent;

if (!enable) return null;
---

{
  contactInformation && (
    <section>
      <div class="container">
        <div
          class:list={["grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"]}>
          {contactInformation?.map((item) => (
            <Card content={item} />
          ))}
        </div>
      </div>
    </section>
  )
}
<StackedSplit map={map} image={image} direction={imagePosition}>
  {title && <h2 class="text-h1-sm md:text-h1" set:html={markdownify(title)} />}
  {description && <p class="text-lg" set:html={markdownify(description)} />}
  {form && <ContactForm class={"mb-0"} form={form} />}
</StackedSplit>
