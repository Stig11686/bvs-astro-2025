---
import StackedSplit from "../widgets/StackedSplit.astro";
import { markdownify } from "@/lib/utils/textConverter";
import OptimizedImage from "../utilities/OptimizedImage.astro";

// Fetch reviews directly from Google Places API
async function getGoogleReviews() {
  const placeId = import.meta.env.GOOGLE_PLACE_ID;
  const apiKey = import.meta.env.GOOGLE_API_KEY;

  const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,rating,reviews&key=${apiKey}`;

  const res = await fetch(url);
  if (!res.ok) throw new Error("Failed to fetch Google Reviews");

  const data = await res.json();

  // Map reviews into your testimonial format
  return data.result.reviews?.map((review: any) => ({
    content: review.text,
    customer: {
      name: review.author_name,
      role: `Rating: ${review.rating} ⭐️`,
      avatar: review.profile_photo_url
    },
  })) || [];
}

type TestimonialInterface = {
  enable: boolean;
  title?: string;
  image?: string;
  imagePosition?: string;
  list?: {
    content: string;
    customer: { name: string; role?: string; avatar?: string };
  }[];
};

type Props = {
  content?: TestimonialInterface;
};

// Fetch Google reviews at build time
let googleReviews = await getGoogleReviews();

// Default section setup
let defaultContent: TestimonialInterface = {
  enable: true,
  title: "What my customers say",
  image: "/images/testimonial/main.jpg",
  imagePosition: "right",
  list: googleReviews,
};

// Merge with optional props (so you can override title/image etc.)
let actualContent = { ...defaultContent, ...Astro.props.content };

let { enable, title, image, imagePosition, list } = actualContent;

if (!enable) return null;
---

<StackedSplit image={image} direction={imagePosition}>
  <div class="space-y-10">
    {title && (
      <h2 class="text-h1-sm md:text-h1 text-white" set:html={markdownify(title)} />
    )}

    {/* Testimonial Slider */}
    <div id="testimonial-slider" class="swiper max-md:pb-10! text-white">
      <OptimizedImage
        class="mb-4 stroke-white"
        src="/images/testimonial/quote.svg"
        alt="icon"
      />

      <div class="swiper-wrapper relative">
        {list?.map((item) => (
          <div class="swiper-slide">
            <p class="mt-4/normal md:text-xl/normal" set:html={markdownify(item.content)} />
            <div class="font-secondary mt-12 space-y-2 font-medium">
              {item.customer.avatar && (
                <img
                  src={item.customer.avatar}
                  referrerpolicy="no-referrer" 
                  alt={item.customer.name}
                  class="w-12 h-12 rounded-full border border-white"
                />
              )}
              {item.customer.name && (
                <h3 class="text-h5 text-white" set:html={markdownify(item.customer.name)} />
              )}
              {item.customer.role && (
                <p class="md:text-lg" set:html={markdownify(item.customer.role)} />
              )}
            </div>
          </div>
        ))}
      </div>

      <div
        class="swiper-pagination testimonial-pagination flex justify-end
          [--swiper-pagination-bullet-inactive-opacity:1]
          [--swiper-pagination-color:var(--color-white)]
          max-md:justify-start max-md:[--swiper-pagination-bottom:0px]
          [&_.swiper-pagination-bullet:not(.swiper-pagination-bullet-active)]:border
          [&_.swiper-pagination-bullet:not(.swiper-pagination-bullet-active)]:bg-transparent!">
      </div>
    </div>
  </div>

  <script>
    window.addEventListener("load", async function () {
      const { Swiper } = await import("swiper");
      const { Autoplay, Pagination } = await import("swiper/modules");

      new Swiper("#testimonial-slider", {
        modules: [Autoplay, Pagination],
        speed: 800,
        spaceBetween: 100,
        slidesPerView: 1,
        pagination: {
          el: ".testimonial-pagination",
          clickable: true,
        },
        autoplay: {
          delay: 4000,
          disableOnInteraction: true,
        },
        loop: true,
      });
    });
  </script>
</StackedSplit>
