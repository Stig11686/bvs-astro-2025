---
import TOC from "./widgets/TableOfContents.astro";
import { markdownify } from "@/lib/utils/textConverter";
import OptimizedImage from "./utilities/OptimizedImage.astro";
import PaginationForSingle from "./widgets/PaginationForSingle.astro";
import { useTranslations } from "@/lib/utils/languageParser";
import Social from "./widgets/Social.astro";
import SocialData from "@/config/social.json";
import formatRelativeDate from "@/lib/utils/formatRelativeDate";
import type { CollectionEntry } from "astro:content";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { render } from "astro:content";

interface Props {
  content: CollectionEntry<"blog">;
  class?: string;
}

const { content, class: className } = Astro.props;
const {
  data: { title, date, image, author, categories, tags },
} = content;

const config = parseTomlToJson("./src/config/config.toml");
const { tableOfContents } = config.settings.markup;

const { Content, headings } = await render(content);
const tocHeadings = headings?.filter((heading) => heading.depth > 1);
const authorName = author || content.data.author || "";

// Check if table of contents is enable
const tocEnabled =
  tableOfContents?.enable && tocHeadings && tocHeadings.length > 0;

const t = await useTranslations(Astro.currentLocale as string);
---

<div
  class:list={[
    "has-video-modal space-y-10 lg:col-span-8 lg:bg-white lg:p-5",
    className,
  ]}>
  {
    image && (
      <OptimizedImage
        width={896}
        height={500}
        alt={title}
        src={image as string}
        class:list={["h-125 w-full object-cover"]}
      />
    )
  }

  <div class="max-w-full space-y-6">
    <ul
      class="text-dark flex flex-wrap items-center gap-x-5 gap-y-1 tracking-wide">
      {
        date && (
          <li class="before:bg-dark relative pe-5 before:absolute before:top-1/2 before:end-0 before:h-1 before:w-1 before:-translate-y-1/2 before:rounded-full before:content-['']">
            {date && markdownify(formatRelativeDate(date, "dd MMM, yyyy"))}
          </li>
        )
      }

      {
        categories?.map((category) => (
          <li class="before:bg-dark relative pe-5 before:absolute before:top-1/2 before:end-0 before:h-1 before:w-1 before:-translate-y-1/2 before:rounded-full before:content-['']">
            {markdownify(category)}
          </li>
        ))
      }

      {
        authorName && (
          <li class="before:bg-dark relative">By {markdownify(authorName)}</li>
        )
      }
    </ul>
    {title && <h1 class="text-h2-sm md:text-h2" set:html={title} />}
    {tocEnabled && tocHeadings && <TOC toc={tocHeadings} marker={false} />}
    {
      Content && (
        <div class="prose-styles content has-video-modal">
          <Content />
        </div>
      )
    }
    <div
      class="mt-10 flex w-full flex-wrap justify-between gap-x-10 gap-y-5 md:mt-14">
      <ul
        class="text-dark flex flex-wrap items-center gap-x-5 gap-y-1 text-sm tracking-wide">
        {
          tags?.map((tag) => (
            <li
              class="before:bg-border-light relative pe-5 capitalize before:absolute before:top-1/2 before:end-0 before:h-4 before:w-px before:-translate-y-1/2 before:rotate-12 before:rounded-full before:content-[''] last:pe-0 last:before:hidden"
              set:html={markdownify(tag)}
            />
          ))
        }
      </ul>
      <div class="flex items-center gap-5">
        <span>{t("blog.share")}</span>
        <Social
          layout="dark"
          linkType="share"
          list={SocialData.main}
          currentPage={content}
        />
      </div>
    </div>
    {
      content && content.collection && (
        <div class="mt-10 border-t-2 pt-10">
          <PaginationForSingle
            prevBtnText={t("blog.paginationPrevious")}
            nextBtnText={t("blog.paginationNext")}
            collection={content.collection}
            currentPage={content}
          />
        </div>
      )
    }
  </div>
</div>
